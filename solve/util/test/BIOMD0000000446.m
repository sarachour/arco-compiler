
%
% This file is automatically generated with
% the System Biology Format Converter (http://sbfc.sourceforge.net/)
% from an SBML file.
%
% The conversion system has the following limitations:
%  - You may have to re order some reactions and Assignment Rules definition
%  - Delays are not taken into account
%  - You should change the lsode parameters (start, end, steps) to get better results
%

%
% The following line is there to be sure that Octave think that this file
% is a script and not function file
%
1;

%
% Model name = Erguler2013 - Unfolded protein stress response
%
% is http://identifiers.org/biomodels.db/MODEL1302180000
% is http://identifiers.org/biomodels.db/BIOMD0000000446
% isDescribedBy http://identifiers.org/pubmed/23433609
%
function z=pow(x,y),z=x^y;endfunction
function z=root(x,y),z=y^(1/x);endfunction
function z = piecewise(varargin)
	numArgs = nargin;
	result = 0;
	foundResult = 0;
	for k=1:2: numArgs-1
		if varargin{k+1} == 1
			result = varargin{k};
			foundResult = 1;
			break;
		endif
	end
	if foundResult == 0
		result = varargin{numArgs};
	endif
z = result;
endfunction

function z=function_EMM(St,Et,Km,kcat), z=(0.5*kcat*(St+Et+Km-((St+Et+Km)^2-4*St*Et)^(0.5)));endfunction

function z=function_Gamma(v,u,J,K), z=(v-u+v*J+u*K);endfunction

function xdot=f(x,t)


	xdot=zeros(27,1);
		deriv(UFPT,t) = ( 1.0 * rxn_2) + (-1.0 * rxn_3) + (-1.0 * rxn_4);
		deriv(BiUFP,t) = ( 1.0 * rxn_u1) + (-1.0 * rxn_u2);
		deriv(BiRE1,t) = ( 1.0 * rxn_u3) + (-1.0 * rxn_u4);
		deriv(BiATF,t) = ( 1.0 * rxn_u5) + (-1.0 * rxn_u6);
		deriv(BiPER,t) = ( 1.0 * rxn_u7) + (-1.0 * rxn_u8);
		deriv(IRE1A,t) = ( 1.0 * rxn_u9) + (-1.0 * rxn_u10);
		deriv(PERKA,t) = ( 1.0 * rxn_u11) + (-1.0 * rxn_u12);
		deriv(mXbp1u,t) = ( 1.0 * rxn_12) + (-1.0 * rxn_13) + (-1.0 * rxn_14);
		deriv(mXbp1s,t) = ( 1.0 * rxn_14) + (-1.0 * rxn_15);
		deriv(Xbp1s,t) = ( 1.0 * rxn_16) + (-1.0 * rxn_17);
		deriv(mBiPT,t) = ( 1.0 * rxn_18) + (-1.0 * rxn_19);
		deriv(BiPT,t) = ( 1.0 * rxn_20) + (-1.0 * rxn_21);
		deriv(ATF6T,t) = ( 1.0 * rxn_5) + (-1.0 * rxn_6) + (-1.0 * rxn_8) + (-1.0 * rxn_w1);
		deriv(ATF6GB,t) = ( 1.0 * rxn_8) + (-1.0 * rxn_9) + (-1.0 * rxn_10);
		deriv(ATF6p50,t) = ( 1.0 * rxn_10) + (-1.0 * rxn_11);
		deriv(mWFS1,t) = ( 1.0 * rxn_w2) + (-1.0 * rxn_w3);
		deriv(WFS1,t) = ( 1.0 * rxn_w4) + (-1.0 * rxn_w5);
		deriv(ATF4,t) = ( 1.0 * rxn_23) + (-1.0 * rxn_24);
		deriv(mCHOP,t) = ( 1.0 * rxn_25) + (-1.0 * rxn_26);
		deriv(CHOP,t) = ( 1.0 * rxn_27) + (-1.0 * rxn_28);
		deriv(mGADD34,t) = ( 1.0 * rxn_29) + (-1.0 * rxn_30);
		deriv(GADD34,t) = ( 1.0 * rxn_31) + (-1.0 * rxn_32);
		deriv(BCL2T,t) = ( 1.0 * rxn_a1) + (-1.0 * rxn_a2);
		deriv(BAXmT,t) = ( 1.0 * rxn_a3) + ( 1.0 * rxn_a4) + (-1.0 * rxn_a5) + (-1.0 * rxn_a6) + (-1.0 * rxn_a7);
		deriv(BH3T,t) = ( 1.0 * rxn_a8) + ( 1.0 * rxn_a9) + (-1.0 * rxn_a10);
		deriv(BAXmBCL2,t) = ( 1.0 * rxn_a11) + (-1.0 * rxn_a12) + (-1.0 * rxn_a13);
		deriv(BH3BCL2,t) = ( 1.0 * rxn_a14) + (-1.0 * rxn_a15) + (-1.0 * rxn_a16);

endfunction

%Initial conditions vector
x0=zeros(27,1);
x0(1) = 0.0;
x0(2) = 0.0;
x0(3) = 0.0;
x0(4) = 0.0;
x0(5) = 0.0;
x0(6) = 0.0;
x0(7) = 0.0;
x0(8) = 0.0;
x0(9) = 0.0;
x0(10) = 0.0;
x0(11) = 0.0;
x0(12) = 0.0;
x0(13) = 0.0;
x0(14) = 0.0;
x0(15) = 0.0;
x0(16) = 0.0;
x0(17) = 0.0;
x0(18) = 0.0;
x0(19) = 0.0;
x0(20) = 0.0;
x0(21) = 0.0;
x0(22) = 0.0;
x0(23) = 0.0;
x0(24) = 0.0;
x0(25) = 0.0;
x0(26) = 0.0;
x0(27) = 0.0;


%Creating linespace
t=linspace(0,90,100);

%Solving equations
x=lsode("f",x0,t);

%ploting the results
plot(t,x);
