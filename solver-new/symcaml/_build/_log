### Starting build.
# Target: SymCamlTest.ml.depends, tags: { debug, extension:ml, file:SymCamlTest.ml, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules SymCamlTest.ml > SymCamlTest.ml.depends
# Target: SymCaml.ml.depends, tags: { debug, extension:ml, file:SymCaml.ml, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules SymCaml.ml > SymCaml.ml.depends
# Target: PyCamlWrapper.ml.depends, tags: { debug, extension:ml, file:PyCamlWrapper.ml, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules PyCamlWrapper.ml > PyCamlWrapper.ml.depends
# Target: SymCamlData.ml.depends, tags: { debug, extension:ml, file:SymCamlData.ml, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules SymCamlData.ml > SymCamlData.ml.depends
# Target: SymCamlData.cmo, tags: { byte, compile, debug, extension:cmo, extension:ml, file:SymCamlData.cmo, file:SymCamlData.ml, implem, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlData.cmo SymCamlData.ml
# Target: SymCamlLexer.mll, tags: { debug, extension:mll, file:SymCamlLexer.mll, lexer, ocaml, ocamllex, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
/usr/bin/ocamllex.opt -q SymCamlLexer.mll
# Target: SymCamlLexer.ml.depends, tags: { debug, extension:ml, file:SymCamlLexer.ml, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules SymCamlLexer.ml > SymCamlLexer.ml.depends
# Target: SymCamlParser.mly, tags: { debug, extension:mly, file:SymCamlParser.mly, infer, ocaml, ocamlyacc, package(yojson,extlib,core,pycaml,str), parser, quiet, thread, traverse }
/usr/bin/ocamlyacc SymCamlParser.mly
# Target: SymCamlParser.mli.depends, tags: { debug, extension:mli, file:SymCamlParser.mli, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules SymCamlParser.mli > SymCamlParser.mli.depends
# Target: SymCamlParser.cmi, tags: { byte, compile, debug, extension:mli, file:SymCamlParser.mli, interf, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlParser.cmi SymCamlParser.mli
# Target: PyCamlWrapper.cmo, tags: { byte, compile, debug, extension:cmo, extension:ml, file:PyCamlWrapper.cmo, file:PyCamlWrapper.ml, implem, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o PyCamlWrapper.cmo PyCamlWrapper.ml
+ ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o PyCamlWrapper.cmo PyCamlWrapper.ml
File "PyCamlWrapper.ml", line 69, characters 18-20:
Warning 3: deprecated: Pervasives.or
Use (||) instead.
File "PyCamlWrapper.ml", line 44, characters 13-16:
Warning 26: unused variable typ.
File "PyCamlWrapper.ml", line 45, characters 13-18:
Warning 26: unused variable value.
File "PyCamlWrapper.ml", line 46, characters 13-18:
Warning 26: unused variable trace.
File "PyCamlWrapper.ml", line 145, characters 10-20:
Warning 26: unused variable modulename.
# Target: SymCamlLexer.cmo, tags: { byte, compile, debug, extension:cmo, extension:ml, file:SymCamlLexer.cmo, file:SymCamlLexer.ml, implem, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlLexer.cmo SymCamlLexer.ml
# Target: SymCaml.cmo, tags: { byte, compile, debug, extension:cmo, extension:ml, file:SymCaml.cmo, file:SymCaml.ml, implem, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCaml.cmo SymCaml.ml
# Target: SymCamlTest.cmo, tags: { byte, compile, debug, extension:cmo, extension:ml, file:SymCamlTest.cmo, file:SymCamlTest.ml, implem, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlTest.cmo SymCamlTest.ml
+ ocamlfind ocamlc -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlTest.cmo SymCamlTest.ml
File "SymCamlTest.ml", line 26, characters 13-36:
Warning 10: this expression should have type unit.
File "SymCamlTest.ml", line 8, characters 7-8:
Warning 26: unused variable b.
# Target: SymCamlData.cmx, tags: { compile, debug, extension:cmx, extension:ml, file:SymCamlData.cmx, file:SymCamlData.ml, implem, native, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlData.cmx SymCamlData.ml
# Target: SymCamlParser.ml.depends, tags: { debug, extension:ml, file:SymCamlParser.ml, ocaml, ocamldep, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamldep -package yojson,extlib,core,pycaml,str -modules SymCamlParser.ml > SymCamlParser.ml.depends
# Target: SymCamlParser.cmx, tags: { compile, debug, extension:cmx, extension:ml, file:SymCamlParser.cmx, file:SymCamlParser.ml, implem, native, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlParser.cmx SymCamlParser.ml
# Target: PyCamlWrapper.cmx, tags: { compile, debug, extension:cmx, extension:ml, file:PyCamlWrapper.cmx, file:PyCamlWrapper.ml, implem, native, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o PyCamlWrapper.cmx PyCamlWrapper.ml
+ ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o PyCamlWrapper.cmx PyCamlWrapper.ml
File "PyCamlWrapper.ml", line 69, characters 18-20:
Warning 3: deprecated: Pervasives.or
Use (||) instead.
File "PyCamlWrapper.ml", line 44, characters 13-16:
Warning 26: unused variable typ.
File "PyCamlWrapper.ml", line 45, characters 13-18:
Warning 26: unused variable value.
File "PyCamlWrapper.ml", line 46, characters 13-18:
Warning 26: unused variable trace.
File "PyCamlWrapper.ml", line 145, characters 10-20:
Warning 26: unused variable modulename.
# Target: SymCamlLexer.cmx, tags: { compile, debug, extension:cmx, extension:ml, file:SymCamlLexer.cmx, file:SymCamlLexer.ml, implem, native, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlLexer.cmx SymCamlLexer.ml
# Target: SymCaml.cmx, tags: { compile, debug, extension:cmx, extension:ml, file:SymCaml.cmx, file:SymCaml.ml, implem, native, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCaml.cmx SymCaml.ml
# Target: SymCamlTest.cmx, tags: { compile, debug, extension:cmx, extension:ml, file:SymCamlTest.cmx, file:SymCamlTest.ml, implem, native, ocaml, package(yojson,extlib,core,pycaml,str), quiet, thread, traverse }
ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlTest.cmx SymCamlTest.ml
+ ocamlfind ocamlopt -c -g -thread -package yojson,extlib,core,pycaml,str -o SymCamlTest.cmx SymCamlTest.ml
File "SymCamlTest.ml", line 26, characters 13-36:
Warning 10: this expression should have type unit.
File "SymCamlTest.ml", line 8, characters 7-8:
Warning 26: unused variable b.
# Target: SymCamlTest.native, tags: { debug, dont_link_with, extension:native, file:SymCamlTest.native, link, native, ocaml, package(yojson,extlib,core,pycaml,str), program, quiet, thread, traverse }
ocamlfind ocamlopt -linkpkg -g -thread -package yojson,extlib,core,pycaml,str SymCamlData.cmx PyCamlWrapper.cmx SymCamlParser.cmx SymCamlLexer.cmx SymCaml.cmx SymCamlTest.cmx -o SymCamlTest.native
# Compilation successful.
