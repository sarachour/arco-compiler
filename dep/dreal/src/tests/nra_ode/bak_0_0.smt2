(set-logic QF_NRA_ODE)
(declare-fun y () Real)
(declare-fun x () Real)
(declare-fun tau () Real)
(declare-fun y_0_0 () Real)
(declare-fun y_0_t () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(declare-fun time_0 () Real)
(declare-fun mode_0 () Real)
(define-ode flow_1 ((= d/dt[x] y) (= d/dt[y] (- (* (- 1 (* x x)) y) x)) (= d/dt[tau] 1)))
(assert (<= -15 y_0_0))
(assert (<= y_0_0 15))
(assert (<= -15 y_0_t))
(assert (<= y_0_t 15))
(assert (<= -15 x_0_0))
(assert (<= x_0_0 15))
(assert (<= -15 x_0_t))
(assert (<= x_0_t 15))
(assert (<= 0 tau_0_0))
(assert (<= tau_0_0 10))
(assert (<= 0 tau_0_t))
(assert (<= tau_0_t 10))
(assert (<= 0 time_0 [0.000000]))
(assert (<= time_0 10 [0.000000]))
(assert (<= 1 mode_0))
(assert (<= mode_0 1))
(assert (and (and (= tau_0_0 0) (= y_0_0 0.5) (= x_0_0 1)) (= mode_0 1) (= [y_0_t x_0_t tau_0_t] (integral 0. time_0 [y_0_0 x_0_0 tau_0_0] flow_1)) (= mode_0 1) (= mode_0 1) (> tau_0_t 5) (= x_0_t 0)))
(check-sat)
(exit)
